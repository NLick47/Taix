<ResourceDictionary xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:base="using:UI.Controls.Base"
		xmlns:sys="using:System;assembly=mscorlib"
        xmlns:controls="using:UI.Controls.Input">

	<ControlTheme x:Key="{x:Type controls:InputBox}" TargetType="controls:InputBox">
		<Setter Property="CornerRadius" Value="6"/>
		<Setter Property="Height" Value="37"/>
		<Setter Property="IconMargin" Value="5,0,0,0"/>
		<Setter Property="IconColor" Value="#333"/>
		<Setter Property="TitleColor" Value="#333"/>
		<Setter Property="IconSize" Value="16"/>
		<Setter Property="TitleSize" Value="12"/>
		<Setter Property="TitleMargin" Value="0,0,0,5"/>
		<Setter Property="BoxPadding" Value="0"/>
		<Setter Property="Foreground" Value="{DynamicResource DefaultTextBrush}"/>

		<Setter Property="Background" Value="{DynamicResource InputBoxBgBrush}"/>

		<Setter Property="Template">
			<ControlTemplate>
				<Border Name="BoxBorder"
				BorderThickness="2"
						Padding="{TemplateBinding BoxPadding}" 
						Background="{TemplateBinding Background}"
			   BorderBrush="{TemplateBinding BorderBrush}"
			   CornerRadius="{TemplateBinding CornerRadius}">

					<Border.Transitions>
						<Transitions>
							<BrushTransition Property="Background" Duration="0.18"/>
							<BrushTransition Property="BorderBrush" Duration="0.18"/>
						</Transitions>
					</Border.Transitions>
					<DockPanel Margin="{TemplateBinding Padding}"
							   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							   VerticalAlignment="{TemplateBinding VerticalContentAlignment}">

						<TextBlock Name="floatingWatermark"
								   DockPanel.Dock="Top"
								   FontSize="{DynamicResource FontSizeSmall}"
								   Foreground="{DynamicResource ThemeAccentBrush}"
								   Text="{TemplateBinding Watermark}">
							<TextBlock.IsVisible>
								<MultiBinding Converter="{x:Static BoolConverters.And}">
									<Binding Path="UseFloatingWatermark"
											 RelativeSource="{RelativeSource TemplatedParent}" />
									<Binding Converter="{x:Static StringConverters.IsNotNullOrEmpty}"
											 Path="Text"
											 RelativeSource="{RelativeSource TemplatedParent}" />
								</MultiBinding>
							</TextBlock.IsVisible>
						</TextBlock>

						<DataValidationErrors>

							<Grid ColumnDefinitions="Auto,*,Auto">

								<base:Icon x:Name="Icon"
								   IconType="{TemplateBinding Icon}"
								   Margin="{TemplateBinding IconMargin}"
								   Foreground="{TemplateBinding IconColor}"
								   RenderTransformOrigin=".5,.5"
								   Grid.Column="0"
								   Grid.ColumnSpan="1"
								   FontSize="{TemplateBinding IconSize}">
									<base:Icon.RenderTransform>
										<ScaleTransform ScaleX="1" ScaleY="1"/>
									</base:Icon.RenderTransform>

									<base:Icon.Transitions>
										<Transitions>
											<BrushTransition Property="Foreground" Duration="0.18"/>
										</Transitions>
									</base:Icon.Transitions>
								</base:Icon>
								
								
								<ScrollViewer Margin="10,0,0,0" Name="PART_ScrollViewer"
											  Grid.Column="1"
											  Grid.ColumnSpan="1"
											  AllowAutoHide="{TemplateBinding (ScrollViewer.AllowAutoHide)}"
											  BringIntoViewOnFocusChange="{TemplateBinding (ScrollViewer.BringIntoViewOnFocusChange)}"
											  HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
											  IsScrollChainingEnabled="{TemplateBinding (ScrollViewer.IsScrollChainingEnabled)}"
											  VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}">
									<Panel VerticalAlignment="Center">
										<TextBlock Name="watermark"
												   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
												   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
												   Opacity="0.5"
												   Text="{TemplateBinding Placeholder}"
												   TextAlignment="{TemplateBinding TextAlignment}"
												   TextWrapping="{TemplateBinding TextWrapping}">
											<TextBlock.IsVisible>
												<MultiBinding Converter="{x:Static BoolConverters.And}">
													<Binding ElementName="PART_TextPresenter" Path="PreeditText" Converter="{x:Static StringConverters.IsNullOrEmpty}"/>
													<Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Text" Converter="{x:Static StringConverters.IsNullOrEmpty}"/>
												</MultiBinding>
											</TextBlock.IsVisible>
										</TextBlock>
										<TextPresenter Name="PART_TextPresenter"
													   CaretBlinkInterval="{TemplateBinding CaretBlinkInterval}"
													   CaretBrush="{TemplateBinding CaretBrush}"
													   CaretIndex="{TemplateBinding CaretIndex}"
													   LineHeight="{TemplateBinding LineHeight}"
													   LetterSpacing="{TemplateBinding LetterSpacing}"
													   PasswordChar="{TemplateBinding PasswordChar}"
													   RevealPassword="{TemplateBinding RevealPassword}"
													   SelectionBrush="{TemplateBinding SelectionBrush}"
													   SelectionEnd="{TemplateBinding SelectionEnd}"
													   SelectionForegroundBrush="{TemplateBinding SelectionForegroundBrush}"
													   SelectionStart="{TemplateBinding SelectionStart}"
													   Text="{TemplateBinding Text,Mode=TwoWay}"
													   TextAlignment="{TemplateBinding TextAlignment}"
													   TextWrapping="{TemplateBinding TextWrapping}" />
									</Panel>
									<ScrollViewer.Styles>
										<Style Selector="ScrollContentPresenter#PART_ContentPresenter">
											<Setter Property="Cursor" Value="IBeam" />
										</Style>
									</ScrollViewer.Styles>
								</ScrollViewer>
								<ContentPresenter Grid.Column="2"
												  Grid.ColumnSpan="1"
												  Content="{TemplateBinding InnerRightContent}" />

								<Popup
									x:Name="ErrorPopup"
									IsLightDismissEnabled="True"
									IsOpen="{TemplateBinding IsShowError}"
									Placement="Bottom"
									PlacementTarget="{Binding ElementName=BoxBorder}">
									<Border
												Background="Red"
												CornerRadius="12"
												Padding="10"
												Margin="10">
										<Border.Effect>
											<DropShadowEffect
												BlurRadius="10"
												Color="Gray"
												Opacity="0.2"/>
										</Border.Effect>

										<Grid>
											<TextBlock x:Name="Placeholder"/>
											<Path
												Width="15"
												Height="15"
												Data="M 0 15 L 7.5 7.5 L 15 15"
												Fill="Red"
												Stroke="Red"
												StrokeThickness="1"
												VerticalAlignment="Top"
												HorizontalAlignment="Left"
												Margin="0,-25,0,0"/>
											<TextBlock Foreground="White" Text="{TemplateBinding Error}"/>
										</Grid>

									</Border>
								</Popup>
							</Grid>
						</DataValidationErrors>


					</DockPanel>
				</Border>
			</ControlTemplate>
		</Setter>

		<Style Selector="^:pointerover /template/ Border#BoxBorder">
			<Setter Property="Background" Value="{DynamicResource InputBoxHoverColor}" />
		</Style>
		<Style Selector="^:focus /template/ Border#BoxBorder">
			<Setter Property="BorderBrush" Value="{DynamicResource ThemeColor}" />
			<Setter Property="Background" Value="{DynamicResource InputBoxFocusedBgColor}" />
		</Style>
		
		<Style Selector="^[Icon=None] /template/ base|Icon#Icon">
			<Setter Property="IsVisible" Value="False" />
		</Style>

		<Style Selector="^:focus /template/ base|Icon#Icon">
			<Setter Property="Foreground" Value="{DynamicResource ThemeColor}" />
		</Style>
		
		<Style Selector="^:error /template/ Border#BoxBorder">
			<Setter Property="BorderBrush" Value="{DynamicResource ErrorBrush}" />
		</Style>
		<Style Selector="^ /template/ Border#BoxBorder">
			<Setter Property="Background" Value="red"/>
		</Style>

		<Style Selector="^ /template/ DockPanel">
			<Setter Property="Cursor" Value="IBeam" />
		</Style>
		<Style Selector="^:disabled /template/ Border#BoxBorder">
			<Setter Property="Opacity" Value="{DynamicResource ThemeDisabledOpacity}" />
		</Style>
		<Style Selector="^ /template/ TextBlock#floatingWatermark">
			<Setter Property="Cursor" Value="IBeam"/>
		</Style>

		

		<Style Selector="^[AcceptsReturn=False][IsReadOnly=False]:focus:not(controls|InputBox:empty)">
			<Setter Property="InnerRightContent">
				<Template>
					<Button Margin="0,0,10,0" Command="{Binding $parent[TextBox].Clear}"
							Focusable="False"
							Theme="{StaticResource SimpleTextBoxClearButtonTheme}"
							ClipToBounds="True" />
				</Template>
			</Setter>
		</Style>


	</ControlTheme>


</ResourceDictionary>
